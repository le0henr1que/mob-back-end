// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}


model User {
  id        String @id @default(uuid())
  name     String
  email String @unique
  picture String?
  password String
  accepted_terms Boolean
  confirmed_email Boolean? @default(false)
  cookieConsent Boolean? @default(false)
  rating       Rating[]
  rasswordResetRequest PasswordResetRequest[]
  confirmEmailRequest ConfirmEmailRequest[]
}


model Rating {
  id              String   @id @default(uuid())
  userId          String
  localId          String
  // commentId String
  rating            Int
  createdAt       DateTime @default(now())
  comment       Comment[]
  local Local @relation(fields: [localId], references: [id])
  user User @relation(fields: [userId], references: [id])
  
}

model Comment {
  id              String   @id @default(uuid())
  comment_text String?
  ratingId String?
  title String
  createdAt       DateTime @default(now())
  rating Rating? @relation(fields: [ratingId], references: [id])

}
model Local {
  id             String     @id @default(uuid())
  name           String
  categoryId    Int?
  subcategoryId  Int?
  cnpj           String?
  createdAt      DateTime   @default(now())
  addressId      String?

  category       Category?   @relation(fields: [categoryId], references: [id]) 
  subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id])

  address        Address?   @relation(fields: [addressId], references: [id])
  rating         Rating[]
}

model Category {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  subcategory  Subcategory[]
  local  Local[]
}

model Subcategory {
  id             Int         @id @default(autoincrement())
  name           String      @unique
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])
  local  Local[]
}



model Address {
  id String @id @default(uuid())
  cep String
  complement String?
  number String
  logradouro String
  bairro String
  city String
  state String
  local  Local[]
}


model Blacklist {
  id String @id @default(uuid())
  token String
  exp DateTime
}

model PasswordResetRequest {

  id String @id @default(uuid())
  token String
  userId          String?
  codeChallenge String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  user User? @relation(fields: [userId], references: [id])
  status String @default("pending")
  // used
  // expired
}

model ConfirmEmailRequest {

  id String @id @default(uuid())
  token String
  userId          String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  user User? @relation(fields: [userId], references: [id])
  status String @default("pending")
  // used
  // expired
}